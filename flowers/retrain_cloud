#!/bin/bash
declare -r CMD=$1
declare -r MODEL_NAME=article_classifier

if [[ $CMD == 'pre' ]]; then
  declare -r JOB_ID="${MODEL_NAME}_$(date +%Y%m%d_%H%M%S)"
  echo $JOB_ID > data/job_id_cloud
else
  declare -r JOB_ID=$(cat data/job_id_cloud)
fi

declare -r PROJECT=$(gcloud config list project --format "value(core.project)")
declare -r BUCKET="gs://${PROJECT}-ml"
declare -r GCS_PATH="${BUCKET}/${MODEL_NAME}/jobs/${JOB_ID}"
declare -r DATA_PATH="${BUCKET}/${MODEL_NAME}/data"
declare -r DICT_FILE="${DATA_PATH}/article_dict.txt"
LABEL_COUNT=`wc -l < data/article_dict.txt`

echo
echo "Using job id: " $JOB_ID

if [[ $CMD == 'gen' ]]; then
  echo "Fetch image embedding files"
  python fetch_image_embeddings.py

  echo "Generate csv files"
  rm -f data/train_set*.csv data/eval_set*.csv
  python gen_csv.py

  echo "Uploading ${DATA_PATH}"
  gsutil -m rm "${DATA_PATH}/eval_set*.csv"
  gsutil -m rm "${DATA_PATH}/train_set*.csv"
  gsutil -m rm "${DATA_PATH}/article_dict.txt"
  gsutil -m cp data/eval_set*.csv $DATA_PATH
  gsutil -m cp data/train_set*.csv $DATA_PATH
  gsutil -m cp data/article_dict.txt $DATA_PATH

elif [[ $CMD == 'pre' ]]; then
  echo "data: ${DATA_PATH}"

  JOB_NAME="preprocess-train-$(date +%Y%m%d-%H%M%S)"
  echo "Job: ${JOB_NAME}"

  python -E preprocess.py \
    --job_name $JOB_NAME \
    --input_dict "$DICT_FILE" \
    --input_path "${DATA_PATH}/train_set*.csv" \
    --output_path "${GCS_PATH}/preproc/train" \
    --emb_path "${DATA_PATH}/image_embeddings" \
    --setup_file ./setup.py \
    --num_workers 1 \
    --cloud &> log/preprocess_train.log &
  sleep 20

  JOB_NAME="preprocess-eval-$(date +%Y%m%d-%H%M%S)"
  echo "Job: ${JOB_NAME}"

  python -E preprocess.py \
    --job_name $JOB_NAME \
    --input_dict "$DICT_FILE" \
    --input_path "${DATA_PATH}/eval_set*.csv" \
    --output_path "${GCS_PATH}/preproc/eval" \
    --emb_path "${DATA_PATH}/image_embeddings" \
    --setup_file ./setup.py \
    --num_workers 1 \
    --cloud &> log/preprocess_eval.log &
  sleep 20

#    --autoscaling_algorithm=NONE \
#    --num_workers 1 \
#    --max_num_workers 1 \
# 	 --staging_location "${GCS_PATH}/staging" \

elif [[ $CMD == 'down_pre' ]]; then
  mkdir -p "jobs/${JOB_ID}/preproc"
  rm -f "jobs/${JOB_ID}/preproc/eval*"
  rm -f "jobs/${JOB_ID}/preproc/train*"
  gsutil -m cp "${GCS_PATH}/preproc/eval*" "jobs/${JOB_ID}/preproc/"
  gsutil -m cp "${GCS_PATH}/preproc/train*" "jobs/${JOB_ID}/preproc/"

elif [[ $CMD == 'info' ]]; then
  gsutil ls "${GCS_PATH}/preproc/eval*"
  gsutil ls "${GCS_PATH}/preproc/train*"

elif [[ $CMD == 'train' ]] || [[ $CMD == 'train_test' ]]; then
  if [[ $CMD == 'train' ]]; then
    TRAIN_PATHS="${GCS_PATH}/preproc/train*,${GCS_PATH}/preproc/eval*"
  else
    TRAIN_PATHS="${GCS_PATH}/preproc/train*"
  fi

  echo "Training on local is quick after preprocessing."
  echo "Labels count: $LABEL_COUNT"
  echo "train paths: $TRAIN_PATHS"

  OUTPUT_ID="$(date +%m%d_%H%M%S)"
  echo $OUTPUT_ID > data/output_id_cloud

  PACKAGE_STAGING_PATH="${BUCKET}/${MODEL_NAME}/staging" \
    gcloud ml-engine jobs submit training "${JOB_ID}_$(date +%m%d_%H%M%S)" \
    --stream-logs \
    --module-name trainer.task \
    --package-path trainer \
    --staging-bucket $BUCKET \
    --region us-central1 \
    --runtime-version=1.4 \
    --config config.yaml \
    -- \
    --label_count $LABEL_COUNT \
    --max_steps 20000 \
    --output_path "${GCS_PATH}/training_${OUTPUT_ID}" \
    --eval_data_paths "${GCS_PATH}/preproc/eval*" \
    --train_data_paths "${TRAIN_PATHS}" \
    --input_dict "$DICT_FILE" \
    --dropout 0.5

elif [[ $CMD == 'write_predict' ]]; then
  DATA_PATHS="${GCS_PATH}/preproc/train*,${GCS_PATH}/preproc/eval*"
  OUTPUT_ID=$(cat data/output_id_cloud)

  gcloud ml-engine local train \
    --module-name trainer.task \
    --package-path trainer \
    -- \
    --write_predictions \
    --label_count $LABEL_COUNT \
    --output_path "${GCS_PATH}/training_${OUTPUT_ID}" \
    --eval_data_paths $DATA_PATHS \
    --input_dict "$DICT_FILE"

  echo "${GCS_PATH}/training_${OUTPUT_ID}"

elif [[ $CMD == 'publish' ]]; then
  echo "Publish the trained model."

  declare -r VERSION_NAME=$2
  echo "Version: " $VERSION_NAME
  echo $VERSION_NAME > data/version_cloud

  gcloud ml-engine versions create "$VERSION_NAME" \
    --model "$MODEL_NAME" \
    --staging-bucket "$BUCKET" \
    --runtime-version=1.4 \
    --origin "${GCS_PATH}/training/model"

fi
